# -*- coding: utf-8 -*-
"""q3_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14aNL9VZsw0KstPs9ibO0xcMvjwtp9QD_
"""

from tensorflow.keras.layers import *
from tensorflow.keras.models import *
from tensorflow.metrics import *
import tensorflow as tf
import imageio
import skimage.color as color
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

import os

IMG_HEIGHT = 256
IMG_WIDTH = 256
IMG_CHANNELS = 1

PATH = '/content/drive/My Drive/keras_png_slices_data' #full path

TRAIN_PATH = '/keras_png_slices_train/'
TEST_PATH = '/keras_png_slices_test/'
VALIDATE_PATH = '/keras_png_slices_validate/'

SEG_TRAIN_PATH = '/keras_png_slices_seg_train/'
SEG_TEST_PATH = '/keras_png_slices_seg_test/'
SEG_VALIDATE_PATH = '/keras_png_slices_seg_validate/'

#TRAIN = np.zeros((len(x_train_ids), IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.float64)
#TEST = np.zeros((len(x_test_ids), IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.float64)
#VALIDATE = np.zeros((len(x_vaildate_ids), IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.float64)

#SEG_TRAIN = np.zeros((len(x_train_ids), IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.float64)
#SEG_TEST = np.zeros((len(x_test_ids), IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.float64)
#SEG_VALIDATE = np.zeros((len(x_vaildate_ids), IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.float64)

def read_data(size, image_path, full_path):
  data = np.empty([size, 256, 256])
  data.astype(np.float64)
  FULL_PATH = full_path + image_path
  for n, a in enumerate(next(os.walk(FULL_PATH))[2][:size]):
    data[n] = imageio.imread(FULL_PATH + a)
  return data

#Read data from path forming an array of (size, 256, 256) size
SIZE = 500
TRAIN = read_data(SIZE*10, TRAIN_PATH, PATH)
TEST = read_data(544, TEST_PATH, PATH)
VALIDATE = read_data(1120, VALIDATE_PATH, PATH)

SEG_TRAIN = read_data(SIZE*10, SEG_TRAIN_PATH, PATH)
SEG_TEST = read_data(544, SEG_TEST_PATH, PATH)
SEG_VALIDATE = read_data(1120, SEG_VALIDATE_PATH, PATH)

TRAIN /= 255
TEST /= 255
VALIDATE /= 255

SEG_TRAIN /= 255
SEG_TEST /= 255
SEG_VALIDATE /= 255

TRAIN = TRAIN[:, :, :, np.newaxis]
TEST = TEST[:, :, :, np.newaxis]
VALIDATE = VALIDATE[:, :, :, np.newaxis]

SEG_TRAIN = SEG_TRAIN[:, :, :, np.newaxis]
SEG_TEST = SEG_TEST[:, :, :, np.newaxis]
SEG_VALIDATE = SEG_VALIDATE[:, :, :, np.newaxis]

print("TRAIN shape: ", TRAIN.shape)
print("SEG_TRAIN shape: ", SEG_TRAIN.shape)

# Build U-Net model
inputs = Input(shape = (IMG_HEIGHT, IMG_WIDTH, 1))

c1 = Conv2D(64, (3, 3), activation='relu', padding='same') (inputs)
c1 = Conv2D(64, (3, 3), activation='relu', padding='same') (c1)
mp1 = MaxPooling2D((2, 2)) (c1)

c2 = Conv2D(128, (3, 3), activation='relu', padding='same') (mp1)
c2 = Conv2D(128, (3, 3), activation='relu', padding='same') (c2)
mp2 = MaxPooling2D(pool_size=(2, 2)) (c2)

c3 = Conv2D(256, (3, 3), activation='relu', padding='same') (mp2)
c3 = Conv2D(256, (3, 3), activation='relu', padding='same') (c3)
mp3 = MaxPooling2D(pool_size=(2, 2)) (c3)

c4 = Conv2D(512, (3, 3), activation='relu', padding='same') (mp3)
c4 = Conv2D(512, (3, 3), activation='relu', padding='same') (c4)
mp4 = MaxPooling2D(pool_size=(2, 2)) (c4)

c5 = Conv2D(1024, (3, 3), activation='relu', padding='same') (mp4)
c5 = Conv2D(1024, (3, 3), activation='relu', padding='same') (c5)

u6 = Conv2DTranspose(1024, (2, 2), strides = (2,2)) (c5)
u6 = concatenate([u6, c4])
c6 = Conv2D(512, (3, 3), activation='relu', padding='same') (u6)
c6 = Conv2D(512, (3, 3), activation='relu', padding='same') (c6)

u7 = Conv2DTranspose(256, (2, 2), strides = (2,2)) (c6)
u7 = concatenate([u7, c3])
c7 = Conv2D(256, (3, 3), activation='relu', padding='same') (u7)
c7 = Conv2D(256, (3, 3), activation='relu', padding='same') (c7)

u8 = Conv2DTranspose(128, (2, 2), strides = (2,2)) (c7)
u8 = concatenate([u8, c2])
c8 = Conv2D(128, (3, 3), activation='relu', padding='same') (u8)
c8 = Conv2D(128, (3, 3), activation='relu', padding='same') (c8)

u9 = Conv2DTranspose(64, (2, 2), strides = (2,2)) (c8)
u9 = concatenate([u9, c1])
c9 = Conv2D(64, (3, 3), activation='relu', padding='same') (u9)
c9 = Conv2D(64, (3, 3), activation='relu', padding='same') (c9)

outputs = Conv2D(1, (1, 1), activation='sigmoid') (c9)

model = Model(inputs=[inputs], outputs=[outputs])
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.summary()

model.fit(x = TRAIN, y = SEG_TRAIN, validation_data=(VALIDATE, SEG_VALIDATE), epochs=5)

prediction = model.predict(TEST)

import matplotlib.pyplot as plt

n = 10 
plt.figure(figsize=(30, 10))
for i in range(1, n+1):
  ax = plt.subplot(1, n, i)
  plt.imshow(TEST[i].reshape(256,256))
  plt.gray()
  ax.get_xaxis().set_visible(False)
  ax.get_yaxis().set_visible(False)

plt.figure(figsize=(30, 10))
for i in range(1, n+1):
  ax = plt.subplot(1, n, i)
  plt.imshow(prediction[i].reshape(256,256))
  plt.gray()
  ax.get_xaxis().set_visible(False)
  ax.get_yaxis().set_visible(False)

plt.figure(figsize=(30, 10))
for i in range(1, n+1):
  ax = plt.subplot(1, n, i)
  plt.imshow(SEG_VALIDATE[i].reshape(256,256))
  plt.gray()
  ax.get_xaxis().set_visible(False)
  ax.get_yaxis().set_visible(False)

